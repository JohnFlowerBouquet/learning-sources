{"version":3,"names":[],"mappings":"","sources":["main.min.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n//Entry Class\r\n\r\nconst endpoint =\r\n  \"https://raw.githubusercontent.com/JohnFlowerBouquet/learning-sources/master/sources.json\";\r\nconst cities = [];\r\nfetch(endpoint)\r\n  .then(blob => blob.json())\r\n  .then(data => cities.push(...data));\r\n\r\nconsole.log(cities[0]);\r\n\r\nclass Entry {\r\n  constructor(title, link, category, technology, year) {\r\n    this.title = title;\r\n    this.link = link;\r\n    this.category = category;\r\n    this.technology = technology;\r\n    this.year = year;\r\n  }\r\n}\r\n//UI Class\r\nclass UI {\r\n  static displayResults() {\r\n    const results = Store.getEntries();\r\n\r\n    results.forEach(result => UI.addEntryToList(result));\r\n  }\r\n\r\n  static addEntryToList(entry) {\r\n    const list = document.querySelector(\"#list-show\");\r\n\r\n    const row = document.createElement(\"tr\");\r\n    row.className = \"table-dark\";\r\n\r\n    row.innerHTML = `\r\n            <td><a href=\"${entry.link}\">${entry.title}</a></td>\r\n            <td>${entry.category}</td>\r\n            <td>${entry.technology}</td>\r\n            <td>${entry.year}</td>\r\n            <td>\r\n              <button type=\"button\" id=\"list-edit\" class=\"badge badge-danger\">\r\n                Edit\r\n              </button>\r\n              <button type=\"button\" id=\"list-delete\" class=\"badge badge-danger delete\">\r\n                Delete\r\n              </button>\r\n            </td>\r\n        `;\r\n    list.appendChild(row);\r\n  }\r\n  static deleteEntry(entry) {\r\n    if (entry.classList.contains(\"delete\")) {\r\n      entry.parentElement.parentElement.remove();\r\n    }\r\n  }\r\n\r\n  static showAlert(message, className) {\r\n    const div = document.createElement(\"div\");\r\n    div.className = `alert alert-${className}`;\r\n    div.appendChild(document.createTextNode(message));\r\n    const container = document.querySelector(\".container\");\r\n    const form = document.querySelector(\"#list-form\");\r\n    container.insertBefore(div, form);\r\n\r\n    setTimeout(() => document.querySelector(\".alert\").remove(), 3000);\r\n  }\r\n\r\n  static clearFields() {\r\n    document.querySelector(\"#input-title\").value = \"\";\r\n    document.querySelector(\"#input-link\").value = \"\";\r\n    document.querySelector(\"#input-technology\").value = \"\";\r\n    document.querySelector(\"#input-year\").value = \"\";\r\n  }\r\n}\r\n\r\n//Store Class\r\nclass Store {\r\n  static getEntries() {\r\n    let entries;\r\n    if (localStorage.getItem(\"entries\") === null) {\r\n      entries = [];\r\n    } else {\r\n      entries = JSON.parse(localStorage.getItem(\"entries\"));\r\n    }\r\n    return entries;\r\n  }\r\n\r\n  static addEntry(entry) {\r\n    const entries = Store.getEntries();\r\n\r\n    entries.push(entry);\r\n    localStorage.setItem(\"entries\", JSON.stringify(entries));\r\n  }\r\n\r\n  static removeEntry(title) {\r\n    const entries = Store.getEntries();\r\n\r\n    entries.forEach((entry, index) => {\r\n      if (entry.title === title) {\r\n        entries.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    localStorage.setItem(\"entries\", JSON.stringify(entries));\r\n  }\r\n}\r\n//Event: Display Search Results\r\ndocument.addEventListener(\"DOMContentLoaded\", UI.displayResults);\r\n//Event: Add Entry\r\ndocument.querySelector(\"#list-form\").addEventListener(\"submit\", e => {\r\n  e.preventDefault();\r\n  const title = document.querySelector(\"#input-title\").value;\r\n  const link = document.querySelector(\"#input-link\").value;\r\n  const category = document.querySelector(\"#input-category\").value;\r\n  const technology = document.querySelector(\"#input-technology\").value;\r\n  const year = document.querySelector(\"#input-year\").value;\r\n\r\n  //Validation\r\n  if (title === \"\" || link === \"\" || technology === \"\" || year === \"\") {\r\n    UI.showAlert(\"Please fill in all fields corectly\", \"danger\");\r\n  } else {\r\n    const entry = new Entry(title, link, category, technology, year);\r\n\r\n    UI.addEntryToList(entry);\r\n\r\n    Store.addEntry(entry);\r\n\r\n    UI.showAlert(\"Entry Added\", \"succes\");\r\n\r\n    UI.clearFields();\r\n  }\r\n});\r\n\r\n//Event: Remove Entry\r\ndocument.querySelector(\"#list-show\").addEventListener(\"click\", e => {\r\n  UI.deleteEntry(e.target);\r\n  Store.removeEntry(\r\n    e.target.parentElement.parentElement.firstElementChild.textContent\r\n  );\r\n  UI.showAlert(\"Entry Removed\", \"succes\");\r\n});\r\n\r\nfunction saveJSON() {\r\n  const data =\r\n    \"data:text/json;charset=utf-8,\" +\r\n    encodeURIComponent(JSON.stringify(Store.getEntries()));\r\n  var downloadAnchorNode = document.createElement(\"a\");\r\n  downloadAnchorNode.setAttribute(\"href\", data);\r\n  downloadAnchorNode.setAttribute(\"download\", \"sources\" + \".json\");\r\n  document.body.appendChild(downloadAnchorNode); // required for firefox\r\n  downloadAnchorNode.click();\r\n  downloadAnchorNode.remove();\r\n}\r\nconst JSONbutton = document.getElementById(\"saveJSON\");\r\nJSONbutton.addEventListener(\"click\", saveJSON);\r\n\n},{}]},{},[1]);\n"],"file":"main.min.js"}